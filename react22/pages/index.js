import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import Web3Modal from "web3modal";
import { Contract, providers, ethers } from "ethers";
import React, { useEffect, useState, useRef } from "react";
const inter = Inter({ subsets: ['latin'] })
import StateWithInput from '@/components/StateWithInput.js';
import { AIRDROP_CONTRACT_ADDRESS,TOKEN_CONTRACT_ADDRESS, abiofToken,abiofAirdorp } from "../constant/index.js"

export default function Home() {
  const [walletConnected, setWalletConnected] = useState(false);
  //const [nfts, setNfts] = useState(0);
  const web3ModalRef = useRef();



  const getProviderOrSigner = async (needSigner = false) => {
    const provider = await web3ModalRef.current.connect();
    const web3Provider = new ethers.providers.Web3Provider(provider);

    const { chainId } = await web3Provider.getNetwork();
    if (chainId !== 97) {
      window.alert("Change network");
      
    }
    if (needSigner) {
      const signer = web3Provider.getSigner();

      return signer;
    }
    return web3Provider;
  };

  const connectWallet = async () => {
    try {
      await getProviderOrSigner();
      setWalletConnected(true);
    } catch (error) {
      console.error(error);
    }
  };


  useEffect(() => {
    if (!walletConnected) {
      web3ModalRef.current = new Web3Modal({
        network: 97,
        providerOptions: {},
        disableInjectedProvider: false,
      });
      connectWallet();
     
    }
  }, [walletConnected]);

  const [recipientAddresses, setRecipientAddresses] = useState(['', '', '']);
  const [tokenAmounts, setTokenAmounts] = useState(['', '', '']);
// обнов элемента(адр) мас
  const handleRecipientChange = (index, e) => {
    const newAddresses = [...recipientAddresses];
    newAddresses[index] = e.target.value;
    setRecipientAddresses(newAddresses);
  };
// обнов элемента(кол) мас
  const handleTokenAmountChange = (index, e) => {
    const newAmounts = [...tokenAmounts];
    newAmounts[index] = e.target.value;
    setTokenAmounts(newAmounts);
  };

  const reload=() =>{
    location.reload();
  }

  //доб новых инпутов
  const addRow = () => {
    setRecipientAddresses([...recipientAddresses, '']);
    setTokenAmounts([...tokenAmounts, '']);
  };


  const handleAirdrop = async () => {
    const signer = await getProviderOrSigner(true);
      console.log(signer);
      const AirContract = new Contract(AIRDROP_CONTRACT_ADDRESS, abiofAirdorp, signer);
      //const tokenContract = new Contract(TOKEN_CONTRACT_ADDRESS, abiofToken, signer);

    const addresses = recipientAddresses.filter(address => address !== '');
    const amounts = tokenAmounts.filter(amount => amount !== '');
    if (addresses.length !== amounts.length) {
      alert('Error: number of addresses does not match number of token amounts');
      return;
    }
    console.log(addresses);
    
    try {
      //await tokenContract.methods.approve(AIRDROP_CONTRACT_ADDRESS, amounts.reduce((a, b) => a + b, 0)).send({ from: web3.eth.defaultAccount });
      const tx = await AirContract.airdropWithTransfer(TOKEN_CONTRACT_ADDRESS, addresses, amounts);
      console.log(tx);
      //alert('Airdrop successful!');
    } catch (error) {
      console.error(error);
      alert('Error during airdrop');
    }
  
  }
//0x205c657a1dd882f4d9D12E5CD388102D4cF46733
  //0xcbF2539da7C83f4Dec97C53a954Faa0FE6165A3A
  // const balance = async () => {
  //   try {

      
  //   // const TokenContract = new Contract(TOKEN_CONTRACT_ADDRESS, abiofToken, signer);
  //     console.log(AirContract);
  //     const bal =await AirContract.balance("0x205c657a1dd882f4d9D12E5CD388102D4cF46733") ;
  //   console.log('balance', bal);
  //     const tx = await AirContract.airdropWithTransfer(TOKEN_CONTRACT_ADDRESS,["0x205c657a1dd882f4d9D12E5CD388102D4cF46733"],[1] )
  //     console.log(tx);

      
    
  //   } catch(error){console.error(error);}


  // }
  
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
        
     
    <div className='container'> 
      <div className='contant'>
        <h1> Air Drop of FakeToken</h1>
            <h3> Choise number of recipients</h3>
            <button  onClick={reload} className="btn-back">←</button>
           

            <button  onClick={connectWallet} className="btn-disconnect">
              {!walletConnected ? "Connect Wallet" : "disconnect"}
            </button>
        {recipientAddresses.map((address, index) => (
            <div className="input-adr-amoun-btn "key={index}>
              <input type="text" placeholder="Recipient address" value={address} onChange={e => handleRecipientChange(index, e)} />
              <input type="number" placeholder="Token amount" value={tokenAmounts[index]} onChange={e => handleTokenAmountChange(index, e)} />
            </div>
          ))}
          <button className='btn-send' onClick={addRow}>Add recipient</button>
          <button className='btn-send' onClick={handleAirdrop}>Airdrop tokens</button>

      </div>
 
    </div>


{/* 
            <div>You can mint NFT:</div>
          <button  onClick={balance}>
            mint
          </button> */}
        </div>
      </main>
    </>
  );
  }
